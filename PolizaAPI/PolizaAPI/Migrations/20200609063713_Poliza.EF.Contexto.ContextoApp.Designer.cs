// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Poliza.EF.Contexto;

namespace Poliza.Api.Migrations
{
    [DbContext(typeof(ContextoApp))]
    [Migration("20200609063713_Poliza.EF.Contexto.ContextoApp")]
    partial class PolizaEFContextoContextoApp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Poliza.Model.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("IdCliente");

                    b.ToTable("Cliente");

                    b.HasData(
                        new
                        {
                            IdCliente = 1,
                            Email = "yonan.cano@gmail.com",
                            Nombre = "Yonan Cano"
                        },
                        new
                        {
                            IdCliente = 2,
                            Email = "lorena.munoz@gmail.com",
                            Nombre = "Lorena Muñoz"
                        },
                        new
                        {
                            IdCliente = 3,
                            Email = "daniela.duran@gmail.com",
                            Nombre = "Daniela Duran"
                        },
                        new
                        {
                            IdCliente = 4,
                            Email = "ernesto.enado@gmail.com",
                            Nombre = "Ernesto Enado"
                        },
                        new
                        {
                            IdCliente = 5,
                            Email = "fiorela.flores@gmail.com",
                            Nombre = "Fiorela Flores"
                        },
                        new
                        {
                            IdCliente = 6,
                            Email = "gabriel.guzman@gmail.com",
                            Nombre = "Gabriel Guzman"
                        });
                });

            modelBuilder.Entity("Poliza.Model.Poliza", b =>
                {
                    b.Property<int>("IdPoliza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("IdCliente")
                        .HasColumnType("int");

                    b.Property<DateTime>("InicioVigencia")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<byte>("PeriodoCobertura")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PorcentajeCobertura")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("TipoCubrimiento")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TipoRiesgo")
                        .HasColumnType("tinyint");

                    b.HasKey("IdPoliza");

                    b.HasIndex("IdCliente");

                    b.ToTable("Poliza");

                    b.HasData(
                        new
                        {
                            IdPoliza = 1,
                            Descripcion = "Permite la cobertura relacionado con un Terremoto",
                            IdCliente = 1,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 191, DateTimeKind.Local).AddTicks(3349),
                            Nombre = "Poliza 001",
                            PeriodoCobertura = (byte)10,
                            PorcentajeCobertura = (byte)15,
                            Precio = 900000m,
                            TipoCubrimiento = (byte)1,
                            TipoRiesgo = (byte)1
                        },
                        new
                        {
                            IdPoliza = 2,
                            Descripcion = "Permite la cobertura relacionado con un Incendio",
                            IdCliente = 1,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 192, DateTimeKind.Local).AddTicks(4574),
                            Nombre = "Poliza 002",
                            PeriodoCobertura = (byte)10,
                            PorcentajeCobertura = (byte)82,
                            Precio = 1500000m,
                            TipoCubrimiento = (byte)2,
                            TipoRiesgo = (byte)2
                        },
                        new
                        {
                            IdPoliza = 3,
                            Descripcion = "Permite la cobertura relacionado con un Robo",
                            IdCliente = 2,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 192, DateTimeKind.Local).AddTicks(4634),
                            Nombre = "Poliza 003",
                            PeriodoCobertura = (byte)6,
                            PorcentajeCobertura = (byte)50,
                            Precio = 3250000m,
                            TipoCubrimiento = (byte)3,
                            TipoRiesgo = (byte)4
                        },
                        new
                        {
                            IdPoliza = 4,
                            Descripcion = "Permite la cobertura relacionado con un Robo",
                            IdCliente = 2,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 192, DateTimeKind.Local).AddTicks(4637),
                            Nombre = "Poliza 003",
                            PeriodoCobertura = (byte)6,
                            PorcentajeCobertura = (byte)50,
                            Precio = 3250000m,
                            TipoCubrimiento = (byte)3,
                            TipoRiesgo = (byte)4
                        },
                        new
                        {
                            IdPoliza = 5,
                            Descripcion = "Permite la cobertura relacionado con una Pérdida",
                            IdCliente = 3,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 192, DateTimeKind.Local).AddTicks(4639),
                            Nombre = "Poliza 004",
                            PeriodoCobertura = (byte)4,
                            PorcentajeCobertura = (byte)56,
                            Precio = 12000000m,
                            TipoCubrimiento = (byte)4,
                            TipoRiesgo = (byte)3
                        },
                        new
                        {
                            IdPoliza = 6,
                            Descripcion = "Permite la cobertura relacionado con un Robo",
                            IdCliente = 6,
                            InicioVigencia = new DateTime(2020, 6, 9, 0, 37, 13, 192, DateTimeKind.Local).AddTicks(4641),
                            Nombre = "Poliza 005",
                            PeriodoCobertura = (byte)10,
                            PorcentajeCobertura = (byte)66,
                            Precio = 1350000m,
                            TipoCubrimiento = (byte)3,
                            TipoRiesgo = (byte)3
                        });
                });

            modelBuilder.Entity("Poliza.Model.Poliza", b =>
                {
                    b.HasOne("Poliza.Model.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
